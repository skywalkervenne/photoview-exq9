"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.Logger = exports.makeLogFile = void 0;
var chalk_1 = __importDefault(require("chalk"));
var path_1 = __importDefault(require("path"));
var prettyjson = require('prettyjson');
var ansi_escapes_1 = __importDefault(require("ansi-escapes"));
var ora_1 = __importDefault(require("ora"));
var libs_1 = require("../libs");
var lodash_1 = require("lodash");
var fs_extra_1 = __importDefault(require("fs-extra"));
var execDaemon_1 = require("../execDaemon");
// CLI Colors
var white = function (str) { return str + "\n"; };
var getLogPath = function () {
    var serverless_devs_log_path = process.env['serverless_devs_log_path'];
    var serverless_devs_trace_id = process.env['serverless_devs_trace_id'];
    if (serverless_devs_log_path) {
        if (fs_extra_1.default.existsSync(serverless_devs_log_path)) {
            var stat = fs_extra_1.default.statSync(serverless_devs_log_path);
            if (stat.isFile())
                return serverless_devs_log_path;
            if (libs_1.isCiCdEnv())
                return;
            return path_1.default.join(serverless_devs_log_path, serverless_devs_trace_id + ".log");
        }
    }
    if (libs_1.isCiCdEnv())
        return;
    var logDirPath = path_1.default.join(libs_1.getRootHome(), 'logs');
    fs_extra_1.default.ensureDirSync(logDirPath);
    if (serverless_devs_trace_id) {
        return path_1.default.join(logDirPath, serverless_devs_trace_id + ".log");
    }
};
var makeLogFile = function () {
    process.env['serverless_devs_trace_id'] = "" + libs_1.getPid() + Date.now();
    var filePath = getLogPath();
    if (filePath) {
        execDaemon_1.execDaemon('logger.js');
    }
};
exports.makeLogFile = makeLogFile;
function searchStr(data, str) {
    var arr = [];
    var index = data.indexOf(str);
    while (index > -1) {
        arr.push(index);
        index = data.indexOf(str, index + 1);
    }
    return arr;
}
function formatDebugData(data) {
    try {
        var AccountIDs = searchStr(data, 'AccountID');
        AccountIDs.forEach(function (index) {
            data = data.slice(0, index + 16) + '*'.repeat(10) + data.slice(index + 16 + 10);
        });
        var AccessKeyIDs = searchStr(data, 'AccessKeyID');
        AccessKeyIDs.forEach(function (index) {
            data = data.slice(0, index + 18) + '*'.repeat(18) + data.slice(index + 18 + 18);
        });
        var AccessKeySecrets = searchStr(data, 'AccessKeySecret');
        AccessKeySecrets.forEach(function (index) {
            data = data.slice(0, index + 22) + '*'.repeat(24) + data.slice(index + 22 + 24);
        });
        var SecretAccessKey = searchStr(data, 'SecretAccessKey');
        SecretAccessKey.forEach(function (index) {
            data = data.slice(0, index + 22) + '*'.repeat(30) + data.slice(index + 22 + 30);
        });
        return data;
    }
    catch (error) {
        return data;
    }
}
var gray = chalk_1.default.hex('#8c8d91');
var red = chalk_1.default.hex('#fd5750');
function fill0(value) {
    return value < 10 ? "0" + value : value;
}
function time() {
    var date = new Date();
    var year = date.getFullYear();
    var month = date.getMonth() + 1;
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();
    var second = date.getSeconds();
    return year + "-" + fill0(month) + "-" + fill0(day) + " " + fill0(hour) + ":" + fill0(minute) + ":" + fill0(second);
}
var getName = function (name) { return (name ? " [" + name + "]" : ''); };
function strip(value) {
    var reg = /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
    return typeof value === 'string' ? "\n" + value.replace(reg, '') : "\n" + value;
}
function logWrite(data) {
    var filePath = getLogPath();
    if (filePath) {
        fs_extra_1.default.appendFileSync(filePath, strip(data));
    }
}
var Logger = /** @class */ (function () {
    function Logger(context) {
        this.context = getName(context);
    }
    Logger.log = function (message, color) {
        logWrite(message);
        return process.stdout.write((color ? chalk_1.default[color](message) : message) + "\n");
    };
    Logger.debug = function (name, data) {
        var tmp = formatDebugData(data);
        var newData = "" + gray("[" + time() + "] [DEBUG]" + getName(name) + " - ") + tmp;
        if (process.env['serverless_devs_log_debug'] !== 'false') {
            logWrite(newData);
        }
        if (libs_1.isDebugMode()) {
            console.log(newData);
        }
    };
    Logger.info = function (name, data) {
        var newData = "" + chalk_1.default.green("[" + time() + "] [INFO]" + getName(name) + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.warn = function (name, data) {
        var newData = "" + chalk_1.default.yellow("[" + time() + "] [WARN]" + getName(name) + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.error = function (name, data) {
        var newData = "" + chalk_1.default.red("[" + time() + "] [ERROR]" + getName(name) + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.prototype.log = function (message, color) {
        logWrite(message);
        return process.stdout.write((color ? chalk_1.default[color](message) : message) + "\n");
    };
    Logger.prototype.debug = function (data) {
        var tmp = formatDebugData(data);
        var newData = "" + gray("[" + time() + "] [DEBUG]" + this.context + " - ") + tmp;
        if (process.env['serverless_devs_log_debug'] !== 'false') {
            logWrite(newData);
        }
        if (libs_1.isDebugMode()) {
            console.log(newData);
        }
    };
    Logger.prototype.info = function (data) {
        var newData = "" + chalk_1.default.green("[" + time() + "] [INFO]" + this.context + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.prototype.warn = function (data) {
        var newData = "" + chalk_1.default.yellow("[" + time() + "] [WARN]" + this.context + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.prototype.error = function (data) {
        var newData = "" + chalk_1.default.red("[" + time() + "] [ERROR]" + this.context + " - ") + data;
        logWrite(newData);
        console.log(newData);
    };
    Logger.prototype.output = function (outputs, indent) {
        if (indent === void 0) { indent = 0; }
        // Clear any existing content
        process.stdout.write(ansi_escapes_1.default.eraseDown);
        process.stdout.write(white(prettyjson.render(outputs, {
            keysColor: 'bold',
            dashColor: null,
            numberColor: null,
            stringColor: null,
            trueColor: null,
            falseColor: null,
        }, indent)));
    };
    Logger.prototype.task = function (title, list) {
        return __awaiter(this, void 0, void 0, function () {
            var err, plist, startTime, _i, list_1, item, enabled, title_1, error_1, error_2, endTime, time, getOraMsg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        plist = [];
                        startTime = Date.now();
                        _i = 0, list_1 = list;
                        _a.label = 1;
                    case 1:
                        if (!(_i < list_1.length)) return [3 /*break*/, 11];
                        item = list_1[_i];
                        enabled = typeof item.enabled === 'function' ? item.enabled() : true;
                        if (!enabled) {
                            return [3 /*break*/, 10];
                        }
                        if (!(item.title && item.task)) return [3 /*break*/, 10];
                        title_1 = lodash_1.isFunction(item.title) ? item.title() : item.title;
                        if (!libs_1.isDebugMode()) return [3 /*break*/, 6];
                        this.log(gray(title_1));
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, item.task()];
                    case 3:
                        _a.sent();
                        plist.push(Object.assign(item, { valid: true }));
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        err = error_1;
                        plist.push(Object.assign(item, { valid: false, error: error_1 }));
                        return [3 /*break*/, 11];
                    case 5: return [3 /*break*/, 10];
                    case 6:
                        this.spinner = ora_1.default();
                        this.spinner.start(gray(title_1));
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 10]);
                        return [4 /*yield*/, item.task(this.spinner)];
                    case 8:
                        _a.sent();
                        this.spinner.stop();
                        plist.push(Object.assign(item, { valid: true }));
                        return [3 /*break*/, 10];
                    case 9:
                        error_2 = _a.sent();
                        this.spinner.stop();
                        err = error_2;
                        plist.push(Object.assign(item, { valid: false, error: error_2 }));
                        return [3 /*break*/, 11];
                    case 10:
                        _i++;
                        return [3 /*break*/, 1];
                    case 11:
                        if (plist.length === 0)
                            return [2 /*return*/];
                        endTime = Date.now();
                        time = (Math.round((endTime - startTime) / 10) * 10) / 1000;
                        getOraMsg = function () {
                            var arr = plist.filter(function (item) { return item.id; }).map(function (item) { return item.id; });
                            if (arr.length === 0)
                                return title + " (" + time + "s)";
                            return title + " " + arr.join(', ') + " (" + time + "s)";
                        };
                        if (plist.every(function (obj) { return obj.valid; })) {
                            endTime - startTime > 5 && ora_1.default().succeed(getOraMsg());
                        }
                        else {
                            this.log(red('✖') + " " + getOraMsg());
                            throw err;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return Logger;
}());
exports.Logger = Logger;
exports.logger = new Logger('S-CORE');
//# sourceMappingURL=data:application/json;base64,