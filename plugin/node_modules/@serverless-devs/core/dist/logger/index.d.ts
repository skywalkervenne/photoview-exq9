import { Ora } from 'ora';
declare type LogColor = 'black' | 'red' | 'green' | 'yellow' | 'blue' | 'magenta' | 'cyan' | 'white' | 'whiteBright' | 'gray';
export interface ILogger {
    log: (message: any, color?: LogColor) => any;
    info: (...data: any[]) => any;
    debug: (...data: any[]) => any;
    warn: (...data: any[]) => any;
    error: (...data: any[]) => any;
    output: (outputs: any, indent?: number) => any;
    task: (title: string, option: ITaskOptions[]) => boolean;
}
interface ITaskOptions {
    title: string | Function;
    id?: string;
    task: Function;
    enabled?: Function;
}
export declare const makeLogFile: () => void;
export declare class Logger {
    spinner: Ora;
    context: string;
    constructor(context?: string);
    static log(message: any, color?: LogColor): boolean;
    static debug(name: string, data: any): void;
    static info(name: string, data: any): void;
    static warn(name: string, data: any): void;
    static error(name: string, data: any): void;
    log(message: any, color?: LogColor): boolean;
    debug(data: any): void;
    info(data: any): void;
    warn(data: any): void;
    error(data: any): void;
    output(outputs: any, indent?: number): void;
    task(title: string, list: ITaskOptions[]): Promise<void>;
}
export declare const logger: Logger;
export {};
