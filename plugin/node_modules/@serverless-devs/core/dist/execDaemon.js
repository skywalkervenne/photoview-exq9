"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.execDaemonWithTTL = exports.execDaemon = void 0;
var path_1 = __importDefault(require("path"));
var child_process_1 = require("child_process");
var libs_1 = require("./libs");
var fs_extra_1 = __importDefault(require("fs-extra"));
var TTL = 10 * 60 * 1000;
function readJsonFile(filePath) {
    if (fs_extra_1.default.existsSync(filePath)) {
        var data = fs_extra_1.default.readFileSync(filePath, 'utf8');
        return JSON.parse(data);
    }
}
function execDaemon(filename, config) {
    var filePath = path_1.default.join(__dirname, 'daemon', filename);
    if (!fs_extra_1.default.existsSync(filePath))
        return;
    var subprocess = child_process_1.spawn(process.execPath, [filePath], {
        detached: true,
        stdio: 'ignore',
        env: __assign(__assign({}, process.env), config),
    });
    subprocess.unref();
}
exports.execDaemon = execDaemon;
function execDaemonWithTTL(filename, config) {
    if (libs_1.useLocal())
        return;
    var lockPath = config.lockPath;
    var lockFileInfo = readJsonFile(lockPath);
    var now = Date.now();
    if (now - (lockFileInfo === null || lockFileInfo === void 0 ? void 0 : lockFileInfo.currentTimestamp) < TTL)
        return;
    fs_extra_1.default.writeFileSync(lockPath, JSON.stringify(__assign(__assign({}, lockFileInfo), { currentTimestamp: now }), null, 2));
    execDaemon(filename, config);
}
exports.execDaemonWithTTL = execDaemonWithTTL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY0RhZW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9leGVjRGFlbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQXdCO0FBQ3hCLCtDQUFzQztBQUN0QywrQkFBa0M7QUFDbEMsc0RBQTBCO0FBQzFCLElBQU0sR0FBRyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBUzNCLFNBQVMsWUFBWSxDQUFDLFFBQWdCO0lBQ3BDLElBQUksa0JBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDM0IsSUFBTSxJQUFJLEdBQUcsa0JBQUUsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtBQUNILENBQUM7QUFFRCxTQUFnQixVQUFVLENBQUMsUUFBZ0IsRUFBRSxNQUFnQjtJQUMzRCxJQUFNLFFBQVEsR0FBRyxjQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDMUQsSUFBSSxDQUFDLGtCQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUFFLE9BQU87SUFDckMsSUFBTSxVQUFVLEdBQUcscUJBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDckQsUUFBUSxFQUFFLElBQUk7UUFDZCxLQUFLLEVBQUUsUUFBUTtRQUNmLEdBQUcsd0JBQU8sT0FBTyxDQUFDLEdBQUcsR0FBSyxNQUFNLENBQUU7S0FDbkMsQ0FBQyxDQUFDO0lBQ0gsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3JCLENBQUM7QUFURCxnQ0FTQztBQUVELFNBQWdCLGlCQUFpQixDQUFDLFFBQWdCLEVBQUUsTUFBc0I7SUFDeEUsSUFBSSxlQUFRLEVBQUU7UUFBRSxPQUFPO0lBQ2YsSUFBQSxRQUFRLEdBQUssTUFBTSxTQUFYLENBQVk7SUFDNUIsSUFBTSxZQUFZLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLEdBQUcsSUFBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsZ0JBQWdCLENBQUEsR0FBRyxHQUFHO1FBQUUsT0FBTztJQUN2RCxrQkFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFNBQVMsdUJBQU0sWUFBWSxLQUFFLGdCQUFnQixFQUFFLEdBQUcsS0FBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRyxVQUFVLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFSRCw4Q0FRQyJ9