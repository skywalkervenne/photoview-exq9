"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yaml_1 = __importDefault(require("yaml"));
var types_1 = require("yaml/types");
var lodash_1 = require("lodash");
var constant_1 = require("./constant");
var ParseYaml = /** @class */ (function () {
    function ParseYaml(data) {
        this.doc = yaml_1.default.parseDocument(data);
        this.yamlJson = this.doc.contents.toJSON();
    }
    ParseYaml.prototype.init = function () {
        var contents = this.doc.contents;
        if (contents instanceof types_1.YAMLMap) {
            var items = contents.items;
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                this.iteratorPair(item);
            }
        }
        return this.doc.toJSON();
    };
    ParseYaml.prototype.iteratorPair = function (item) {
        if (item instanceof types_1.Pair) {
            var type = lodash_1.get(item, 'value.type');
            if (type === 'MAP' || type === 'SEQ') {
                for (var _i = 0, _a = item.value.items; _i < _a.length; _i++) {
                    var obj = _a[_i];
                    this.iteratorPair(obj);
                }
                return;
            }
            this.setPairValue(item);
        }
        if (item instanceof types_1.YAMLMap) {
            for (var _b = 0, _c = item.items; _b < _c.length; _b++) {
                var obj = _c[_b];
                this.iteratorPair(obj);
            }
        }
        if (item instanceof types_1.Scalar) {
            this.setScalarValue(item);
        }
    };
    ParseYaml.prototype.setPairValue = function (item) {
        var value = lodash_1.get(item, 'value.value');
        if (lodash_1.isBoolean(value) || lodash_1.isNumber(value) || lodash_1.isEmpty(value))
            return;
        var regResult = value.match(constant_1.COMMON_VARIABLE_TYPE_REG);
        if (regResult) {
            var tmp = this.getRealValue(value, regResult);
            item.value = yaml_1.default.createNode(tmp);
        }
    };
    ParseYaml.prototype.getRealValue = function (value, regResult) {
        var tmp = value;
        for (var _i = 0, regResult_1 = regResult; _i < regResult_1.length; _i++) {
            var iterator = regResult_1[_i];
            var realValue = lodash_1.get(this.yamlJson, iterator.replace(constant_1.COMMON_VARIABLE_TYPE_REG, '$1'), iterator);
            tmp = typeof realValue === 'string' ? tmp.replace(iterator, realValue) : realValue;
        }
        return tmp;
    };
    ParseYaml.prototype.setScalarValue = function (item) {
        if (lodash_1.isBoolean(item.value) || lodash_1.isNumber(item.value) || lodash_1.isEmpty(item.value))
            return;
        var regResult = item.value.match(constant_1.COMMON_VARIABLE_TYPE_REG);
        if (regResult) {
            item.value = this.getRealValue(item.value, regResult);
        }
    };
    return ParseYaml;
}());
function parseYaml(data) {
    return new ParseYaml(data).init();
}
exports.default = parseYaml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VZYW1sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9wYXJzZVlhbWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBc0M7QUFDdEMsb0NBQW1EO0FBQ25ELGlDQUEyRDtBQUMzRCx1Q0FBc0Q7QUFDdEQ7SUFHRSxtQkFBWSxJQUFZO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsY0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFDRCx3QkFBSSxHQUFKO1FBQ1UsSUFBQSxRQUFRLEdBQUssSUFBSSxDQUFDLEdBQUcsU0FBYixDQUFjO1FBQzlCLElBQUksUUFBUSxZQUFZLGVBQU8sRUFBRTtZQUN2QixJQUFBLEtBQUssR0FBSyxRQUFRLE1BQWIsQ0FBYztZQUMzQixLQUFtQixVQUFLLEVBQUwsZUFBSyxFQUFMLG1CQUFLLEVBQUwsSUFBSyxFQUFFO2dCQUFyQixJQUFNLElBQUksY0FBQTtnQkFDYixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3pCO1NBQ0Y7UUFDRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUNELGdDQUFZLEdBQVosVUFBYSxJQUE2QjtRQUN4QyxJQUFJLElBQUksWUFBWSxZQUFJLEVBQUU7WUFDeEIsSUFBTSxJQUFJLEdBQUcsWUFBRyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztZQUNyQyxJQUFJLElBQUksS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtnQkFDcEMsS0FBa0IsVUFBZ0IsRUFBaEIsS0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBaEIsY0FBZ0IsRUFBaEIsSUFBZ0IsRUFBRTtv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