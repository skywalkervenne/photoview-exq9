/// <reference types="node" />
import { EventEmitter as EE } from 'events';
declare class Walker extends EE {
    isSymbolicLink: any;
    path: any;
    basename: string;
    ignoreFiles: any;
    ignoreRules: {};
    parent: any;
    includeEmpty: boolean;
    root: any;
    follow: boolean;
    result: any;
    entries: any;
    sawError: boolean;
    constructor(opts: any);
    sort(a: any, b: any): any;
    emit(ev: any, data: any): boolean;
    start(): this;
    isIgnoreFile(e: any): boolean;
    onReaddir(entries: any): void;
    addIgnoreFiles(): void;
    addIgnoreFile(file: any, then: any): void;
    onReadIgnoreFile(file: any, data: any, then: any): void;
    filterEntries(): void;
    onstat({ st, entry, file, dir, isSymbolicLink }: {
        st: any;
        entry: any;
        file: any;
        dir: any;
        isSymbolicLink: any;
    }, then: any): void;
    stat({ entry, file, dir }: {
        entry: any;
        file: any;
        dir: any;
    }, then: any): void;
    walkerOpt(entry: any, opts: any): any;
    walker(entry: any, opts: any, then: any): void;
    filterEntry(entry: any, partial: any): boolean;
}
declare class WalkerSync extends Walker {
    start(): this;
    addIgnoreFile(file: any, then: any): void;
    stat({ entry, file, dir }: {
        entry: any;
        file: any;
        dir: any;
    }, then: any): void;
    walker(entry: any, opts: any, then: any): void;
}
declare const walk: {
    (opts: any, callback?: any): Promise<any>;
    sync: (opts: any) => any;
    Walker: typeof Walker;
    WalkerSync: typeof WalkerSync;
};
export default walk;
