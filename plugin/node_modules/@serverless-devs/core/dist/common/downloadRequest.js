"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = __importDefault(require("fs-extra"));
var https_1 = __importDefault(require("https"));
var http_1 = __importDefault(require("http"));
var spinner_1 = __importDefault(require("./spinner"));
var chalk_1 = __importDefault(require("chalk"));
var path_1 = __importDefault(require("path"));
var url_1 = require("url");
var decompress_1 = __importDefault(require("decompress"));
var report_1 = __importDefault(require("../common/report"));
var command_exists_1 = __importDefault(require("command-exists"));
var execa_1 = __importDefault(require("execa"));
var strip_dirs_1 = __importDefault(require("strip-dirs"));
var walk_sync_1 = __importDefault(require("walk-sync"));
var rimraf_1 = __importDefault(require("rimraf"));
function download(url, dest, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, filename, uri, pkg;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options.filename, filename = _a === void 0 ? 'demo.zip' : _a;
                    uri = new url_1.URL(url);
                    pkg = url.toLowerCase().startsWith('https:') ? https_1.default : http_1.default;
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            pkg.get(uri.href).on('response', function (res) {
                                var len = parseInt(res.headers['content-length'], 10);
                                fs_extra_1.default.ensureDirSync(dest);
                                var filePath = path_1.default.join(dest, filename);
                                if (res.statusCode === 200) {
                                    var file_1 = fs_extra_1.default.createWriteStream(filePath);
                                    file_1.on('open', function () {
                                        var spin = spinner_1.default("Downloading: [" + chalk_1.default.green(decodeURIComponent(uri.pathname)) + "]");
                                        var downloaded = 0;
                                        res
                                            .on('data', function (chunk) {
                                            file_1.write(chunk);
                                            downloaded += chunk.length;
                                            var tips = len
                                                ? downloaded + "/" + len + " " + ((100.0 * downloaded) / len).toFixed(2) + "%"
                                                : parseInt(String(downloaded / 1024), 10) + "KB";
                                            spin.text = "Downloading: [" + chalk_1.default.green(decodeURIComponent(uri.pathname)) + "] " + tips;
                                        })
                                            .on('end', function () {
                                            file_1.end();
                                            resolve({ filePath: filePath, spin: spin });
                                        })
                                            .on('error', function (err) {
                                            file_1.destroy();
                                            spin.fail();
                                            fs_extra_1.default.unlink(dest, function () { return reject(err); });
                                        });
                                    });
                                }
                                else if (res.statusCode === 302 || res.statusCode === 301) {
                                    // Recursively follow redirects, only a 200 will resolve.
                                    download(res.headers.location, dest, options).then(function (val) { return resolve(val); });
                                }
                                else {
                                    reject({
                                        code: res.statusCode,
                                        message: res.statusMessage,
                                    });
                                }
                            });
                        })];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
exports.default = (function (url, dest, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var extract, filename, restOpts, _a, filePath, spin_1, timer, num_1, useSystemUnzip, tmpDir, index, paths, _i, paths_1, p, fillPath, stat, stripPath, text, error_1, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    extract = options.extract, filename = options.filename, restOpts = __rest(options, ["extract", "filename"]);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 14, , 15]);
                    return [4 /*yield*/, download(url, dest, options)];
                case 2:
                    _a = _b.sent(), filePath = _a.filePath, spin_1 = _a.spin;
                    if (!extract) return [3 /*break*/, 12];
                    timer = void 0;
                    num_1 = 0;
                    timer = setInterval(function () {
                        var str = '.'.repeat(num_1);
                        num_1++;
                        if (num_1 > 3) {
                            num_1 = 0;
                        }
                        spin_1.text = filename ? filename + " file unzipping" + str : "file unzipping" + str;
                    }, 300);
                    useSystemUnzip = false;
                    if (process.env['default_serverless_devs_system_unzip'] === 'true') {
                        useSystemUnzip = command_exists_1.default.sync('unzip');
                    }
                    tmpDir = path_1.default.join(path_1.default.dirname(dest), "devsapp-package-" + Date.now());
                    index = 0;
                    _b.label = 3;
                case 3:
                    if (!(index < 3)) return [3 /*break*/, 11];
                    _b.label = 4;
                case 4:
                    _b.trys.push([4, 9, , 10]);
                    if (!useSystemUnzip) return [3 /*break*/, 5];
                    if (restOpts === null || restOpts === void 0 ? void 0 : restOpts.strip) {
                        execa_1.default.sync('unzip', ['-d', tmpDir, '-o', filePath]);
                        paths = walk_sync_1.default(tmpDir);
                        for (_i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
                            p = paths_1[_i];
                            fillPath = path_1.default.join(tmpDir, p);
                            stat = fs_extra_1.default.statSync(fillPath);
                            if (stat.isFile()) {
                                stripPath = strip_dirs_1.default(p, restOpts.strip);
                                fs_extra_1.default.moveSync(fillPath, path_1.default.join(dest, stripPath), { overwrite: true });
                            }
                        }
                        rimraf_1.default.sync(tmpDir);
                    }
                    else {
                        execa_1.default.sync('unzip', ['-d', dest, '-o', filePath]);
                    }
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, decompress_1.default(filePath, dest, restOpts)];
                case 6:
                    _b.sent();
                    _b.label = 7;
                case 7:
                    clearInterval(timer);
                    return [4 /*yield*/, fs_extra_1.default.unlink(filePath)];
                case 8:
                    _b.sent();
                    text = 'file decompression completed';
                    spin_1.succeed(filename ? filename + " " + text : text);
                    return [3 /*break*/, 11];
                case 9:
                    error_1 = _b.sent();
                    if (index === 2) {
                        clearInterval(timer);
                        spin_1.stop();
                        throw error_1;
                    }
                    return [3 /*break*/, 10];
                case 10:
                    index++;
                    return [3 /*break*/, 3];
                case 11: return [3 /*break*/, 13];
                case 12:
                    spin_1.succeed();
                    _b.label = 13;
                case 13: return [3 /*break*/, 15];
                case 14:
                    error_2 = _b.sent();
                    report_1.default({
                        type: 'networkError',
                        content: url + "||" + error_2.code + "||" + error_2.message,
                    });
                    throw error_2;
                case 15: return [2 /*return*/];
            }
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG93bmxvYWRSZXF1ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbW1vbi9kb3dubG9hZFJlcXVlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLHNEQUEwQjtBQUMxQixnREFBMEI7QUFDMUIsOENBQXdCO0FBQ3hCLHNEQUF5QztBQUN6QyxnREFBMEI7QUFDMUIsOENBQXdCO0FBQ3hCLDJCQUEwQjtBQUMxQiwwREFBMkQ7QUFDM0QsNERBQXNDO0FBQ3RDLGtFQUEyQztBQUMzQyxnREFBMEI7QUFDMUIsMERBQW1DO0FBQ25DLHdEQUFpQztBQUNqQyxrREFBNEI7QUFhNUIsU0FBZSxRQUFRLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxPQUFzQjtJQUF0Qix3QkFBQSxFQUFBLFlBQXNCOzs7Ozs7b0JBQy9ELEtBQTBCLE9BQU8sU0FBWixFQUFyQixRQUFRLG1CQUFHLFVBQVUsS0FBQSxDQUFhO29CQUNwQyxHQUFHLEdBQUcsSUFBSSxTQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ25CLEdBQUcsR0FBRyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFLLENBQUMsQ0FBQyxDQUFDLGNBQUksQ0FBQztvQkFDM0QscUJBQU0sSUFBSSxPQUFPLENBQWtDLFVBQUMsT0FBTyxFQUFFLE1BQU07NEJBQ3hFLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBQyxHQUFHO2dDQUNuQyxJQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dDQUN4RCxrQkFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztnQ0FDdkIsSUFBTSxRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7Z0NBQzNDLElBQUksR0FBRyxDQUFDLFVBQVUsS0FBSyxHQUFHLEVBQUU7b0NBQzFCLElBQU0sTUFBSSxHQUFHLGtCQUFFLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7b0NBQzVDLE1BQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFO3dDQUNkLElBQU0sSUFBSSxHQUFHLGlCQUFPLENBQUMsbUJBQWlCLGVBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQUcsQ0FBQyxDQUFDO3dDQUN4RixJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7d0NBQ25CLEdBQUc7NkNBQ0EsRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFDLEtBQUs7NENBQ2hCLE1BQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7NENBQ2xCLFVBQVUsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDOzRDQUMzQixJQUFNLElBQUksR0FBRyxHQUFHO2dEQUNkLENBQUMsQ0FBSSxVQUFVLFNBQUksR0FBRyxTQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFHO2dEQUNwRSxDQUFDLENBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQUksQ0FBQzs0Q0FDbkQsSUFBSSxDQUFDLElBQUksR0FBRyxtQkFBaUIsZUFBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBSyxJQUFNLENBQUM7d0NBQ3hGLENBQUMsQ0FBQzs2Q0FDRCxFQUFFLENBQUMsS0FBSyxFQUFFOzRDQUNULE1BQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzs0Q0FDWCxPQUFPLENBQUMsRUFBRSxRQUFRLFVBQUEsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLENBQUM7d0NBQzlCLENBQUMsQ0FBQzs2Q0FDRCxFQUFFLENBQUMsT0FBTyxFQUFFLFVBQUMsR0FBRzs0Q0FDZixNQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7NENBQ2YsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDOzRDQUNaLGtCQUFFLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxjQUFNLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO3dDQUNyQyxDQUFDLENBQUMsQ0FBQztvQ0FDUCxDQUFDLENBQUMsQ0FBQztpQ0FDSjtxQ0FBTSxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssR0FBRyxFQUFFO29DQUMzRCx5REFBeUQ7b0NBQ3pELFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFaLENBQVksQ0FBQyxDQUFDO2lDQUMzRTtxQ0FBTTtvQ0FDTCxNQUFNLENBQUM7d0NBQ0wsSUFBSSxFQUFFLEdBQUcsQ0FBQyxVQUFVO3dDQUNwQixPQUFPLEVBQUUsR0FBRyxDQUFDLGFBQWE7cUNBQzNCLENBQUMsQ0FBQztpQ0FDSjs0QkFDSCxDQUFDLENBQUMsQ0FBQzt3QkFDTCxDQUFDLENBQUMsRUFBQTt3QkF2Q0Ysc0JBQU8sU0F1Q0wsRUFBQzs7OztDQUNKO0FBRUQsbUJBQWUsVUFBTyxHQUFXLEVBQUUsSUFBWSxFQUFFLE9BQXNCO0lBQXRCLHdCQUFBLEVBQUEsWUFBc0I7Ozs7OztvQkFDN0QsT0FBTyxHQUE0QixPQUFPLFFBQW5DLEVBQUUsUUFBUSxHQUFrQixPQUFPLFNBQXpCLEVBQUssUUFBUSxVQUFLLE9BQU8sRUFBNUMsdUJBQWtDLENBQUYsQ0FBYTs7OztvQkFFdEIscUJBQU0sUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLEVBQUE7O29CQUF2RCxLQUFxQixTQUFrQyxFQUFyRCxRQUFRLGNBQUEsRUFBRSxnQkFBSTt5QkFDbEIsT0FBTyxFQUFQLHlCQUFPO29CQUNMLEtBQUssU0FBQSxDQUFDO29CQUNOLFFBQU0sQ0FBQyxDQUFDO29CQUNaLEtBQUssR0FBRyxXQUFXLENBQUM7d0JBQ2xCLElBQU0sR0FBRyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBRyxDQUFDLENBQUM7d0JBQzVCLEtBQUcsRUFBRSxDQUFDO3dCQUNOLElBQUksS0FBRyxHQUFHLENBQUMsRUFBRTs0QkFDWCxLQUFHLEdBQUcsQ0FBQyxDQUFDO3lCQUNUO3dCQUNELE1BQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBSSxRQUFRLHVCQUFrQixHQUFLLENBQUMsQ0FBQyxDQUFDLG1CQUFpQixHQUFLLENBQUM7b0JBQ3JGLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFFSixjQUFjLEdBQUcsS0FBSyxDQUFDO29CQUMzQixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0NBQXNDLENBQUMsS0FBSyxNQUFNLEVBQUU7d0JBQ2xFLGNBQWMsR0FBRyx3QkFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztxQkFDOUM7b0JBQ0ssTUFBTSxHQUFHLGNBQUksQ0FBQyxJQUFJLENBQUMsY0FBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxxQkFBbUIsSUFBSSxDQUFDLEdBQUcsRUFBSSxDQUFDLENBQUM7b0JBRXJFLEtBQUssR0FBRyxDQUFDOzs7eUJBQUUsQ0FBQSxLQUFLLEdBQUcsQ0FBQyxDQUFBOzs7O3lCQUVyQixjQUFjLEVBQWQsd0JBQWM7b0JBQ2hCLElBQUksUUFBUSxhQUFSLFFBQVEsdUJBQVIsUUFBUSxDQUFFLEtBQUssRUFBRTt3QkFDbkIsZUFBSyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUM5QyxLQUFLLEdBQUcsbUJBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQzt3QkFDL0IsV0FBcUIsRUFBTCxlQUFLLEVBQUwsbUJBQUssRUFBTCxJQUFLLEVBQUU7NEJBQVosQ0FBQzs0QkFDSixRQUFRLEdBQUcsY0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7NEJBQ2hDLElBQUksR0FBRyxrQkFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzs0QkFDbkMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0NBQ1gsU0FBUyxHQUFHLG9CQUFTLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQ0FDL0Msa0JBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLGNBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7NkJBQ3hFO3lCQUNGO3dCQUNELGdCQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO3FCQUNyQjt5QkFBTTt3QkFDTCxlQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7cUJBQ25EOzt3QkFFRCxxQkFBTSxvQkFBVSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQUE7O29CQUExQyxTQUEwQyxDQUFDOzs7b0JBRTdDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIscUJBQU0sa0JBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUE7O29CQUF6QixTQUF5QixDQUFDO29CQUNwQixJQUFJLEdBQUcsOEJBQThCLENBQUM7b0JBQzVDLE1BQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBSSxRQUFRLFNBQUksSUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDdEQseUJBQU07OztvQkFFTixJQUFJLEtBQUssS0FBSyxDQUFDLEVBQUU7d0JBQ2YsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNyQixNQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBQ1osTUFBTSxPQUFLLENBQUM7cUJBQ2I7OztvQkEvQjBCLEtBQUssRUFBRSxDQUFBOzs7O29CQW1DdEMsTUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDOzs7OztvQkFHakIsZ0JBQU0sQ0FBQzt3QkFDTCxJQUFJLEVBQUUsY0FBYzt3QkFDcEIsT0FBTyxFQUFLLEdBQUcsVUFBSyxPQUFLLENBQUMsSUFBSSxVQUFLLE9BQUssQ0FBQyxPQUFTO3FCQUNuRCxDQUFDLENBQUM7b0JBQ0gsTUFBTSxPQUFLLENBQUM7Ozs7O0NBRWYsRUFBQyJ9