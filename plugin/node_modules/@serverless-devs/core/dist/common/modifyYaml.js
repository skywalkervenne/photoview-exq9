"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var yaml_1 = __importDefault(require("yaml"));
var types_1 = require("yaml/types");
var lodash_1 = require("lodash");
var extend2_1 = __importDefault(require("extend2"));
var ModifyYaml = /** @class */ (function () {
    function ModifyYaml(json, yamlData) {
        this.globalKeys = [];
        this.doc = yaml_1.default.parseDocument(yamlData);
        // 新的json和原有的yaml数据进行合并，拿到一个最全的数据
        this.data = extend2_1.default(true, this.doc.toJSON(), json);
        if (lodash_1.get(json, 'vars')) {
            this.data = __assign(__assign({}, this.data), { vars: lodash_1.get(json, 'vars') });
        }
    }
    ModifyYaml.prototype.init = function () {
        var newDoc = yaml_1.default.parseDocument(yaml_1.default.stringify(this.data));
        var oldContents = this.doc.contents;
        this.setKey(newDoc, this.doc);
        // 对老的yaml收集注释信息等
        if (oldContents instanceof types_1.YAMLMap) {
            var items = oldContents.items;
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item = items_1[_i];
                this.iteratorPair(item, item.key.value);
            }
        }
        // 对新的数据设置注释信息等
        var newContents = newDoc.contents;
        this.setKey(newContents, oldContents);
        if (newContents instanceof types_1.YAMLMap) {
            var items = newContents.items;
            for (var _a = 0, items_2 = items; _a < items_2.length; _a++) {
                var item = items_2[_a];
                this.setComment(item, item.key.value);
            }
        }
        return newDoc.toString();
    };
    ModifyYaml.prototype.addKey = function (item, key) {
        var findObj = lodash_1.find(this.globalKeys, function (o) { return o.key === key; });
        if (findObj)
            return;
        this.globalKeys.push({
            key: key,
            comment: item.comment,
            commentBefore: item.commentBefore,
            range: item.range,
            spaceBefore: item.spaceBefore,
        });
    };
    ModifyYaml.prototype.setKey = function (newVal, oldVal) {
        if (lodash_1.isEmpty(oldVal))
            return;
        newVal.comment = oldVal.comment;
        newVal.commentBefore = oldVal.commentBefore;
        newVal.range = oldVal.range;
        newVal.spaceBefore = oldVal.spaceBefore;
    };
    ModifyYaml.prototype.setComment = function (item, preKey) {
        var findObj = lodash_1.find(this.globalKeys, function (o) { return o.key === preKey; });
        this.setKey(item, findObj);
        if (item instanceof types_1.Pair) {
            if (item.value.type === 'MAP') {
                preKey += '.';
                for (var _i = 0, _a = item.value.items; _i < _a.length; _i++) {
                    var obj = _a[_i];
                    this.setComment(obj, preKey + obj.key.value);
                }
            }
            if (item.value.type === 'SEQ') {
                for (var index in item.value.items) {
                    var obj = item.value.items[index];
                    this.setComment(obj, preKey + ("[" + index + "]"));
                }
            }
            if (item.value.type === 'PLAIN') {
                this.setComment(item.value, preKey + '.value');
                return;
            }
        }
        if (item instanceof types_1.YAMLMap) {
            preKey += '.';
            for (var _b = 0, _c = item.items; _b < _c.length; _b++) {
                var obj = _c[_b];
                this.setComment(obj, preKey + obj.key.value);
            }
        }
    };
    ModifyYaml.prototype.iteratorPair = function (item, preKey) {
        this.addKey(item, preKey);
        if (item instanceof types_1.Pair) {
            if (item.value.type === 'MAP') {
                preKey += '.';
                for (var _i = 0, _a = item.value.items; _i < _a.length; _i++) {
                    var obj = _a[_i];
                    this.iteratorPair(obj, preKey + obj.key.value);
                }
                return;
            }
            if (item.value.type === 'SEQ') {
                for (var index in item.value.items) {
                    var obj = item.value.items[index];
                    this.iteratorPair(obj, preKey + ("[" + index + "]"));
                }
                return;
            }
            if (item.value.type === 'PLAIN') {
                this.iteratorPair(item.value, preKey + '.value');
                return;
            }
        }
        if (item instanceof types_1.YAMLMap) {
            preKey += '.';
            for (var _b = 0, _c = item.items; _b < _c.length; _b++) {
                var obj = _c[_b];
                this.iteratorPair(obj, preKey + obj.key.value);
            }
        }
    };
    return ModifyYaml;
}());
function modifyYaml(json, yamlData) {
    return new ModifyYaml(json, yamlData).init();
}
exports.default = modifyYaml;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kaWZ5WWFtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb21tb24vbW9kaWZ5WWFtbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsOENBQXNDO0FBQ3RDLG9DQUFtRDtBQUNuRCxpQ0FBNEM7QUFDNUMsb0RBQThCO0FBRTlCO0lBSUUsb0JBQVksSUFBWSxFQUFFLFFBQWdCO1FBRGxDLGVBQVUsR0FBNkIsRUFBRSxDQUFDO1FBRWhELElBQUksQ0FBQyxHQUFHLEdBQUcsY0FBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4QyxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25ELElBQUksWUFBRyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRTtZQUNyQixJQUFJLENBQUMsSUFBSSx5QkFBUSxJQUFJLENBQUMsSUFBSSxLQUFFLElBQUksRUFBRSxZQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFFLENBQUM7U0FDdkQ7SUFDSCxDQUFDO0lBQ0QseUJBQUksR0FBSjtRQUNFLElBQU0sTUFBTSxHQUFHLGNBQUksQ0FBQyxhQUFhLENBQUMsY0FBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyRCxJQUFVLFdBQVcsR0FBSyxJQUFJLENBQUMsR0FBRyxTQUFiLENBQWM7UUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTlCLGlCQUFpQjtRQUNqQixJQUFJLFdBQVcsWUFBWSxlQUFPLEVBQUU7WUFDMUIsSUFBQSxLQUFLLEdBQUssV0FBVyxNQUFoQixDQUFpQjtZQUM5QixLQUFtQixVQUFLLEVBQUwsZUFBSyxF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