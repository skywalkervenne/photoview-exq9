"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// https://www.npmjs.com/package/ignore-walk
var fs = __importStar(require("fs"));
var path_1 = __importDefault(require("path"));
var events_1 = require("events");
var minimatch_1 = require("minimatch");
var Walker = /** @class */ (function (_super) {
    __extends(Walker, _super);
    function Walker(opts) {
        var _this = this;
        opts = opts || {};
        _this = _super.call(this, opts) || this;
        // set to true if this.path is a symlink, whether follow is true or not
        _this.isSymbolicLink = opts.isSymbolicLink;
        _this.path = opts.path || process.cwd();
        _this.basename = path_1.default.basename(_this.path);
        _this.ignoreFiles = opts.ignoreFiles || ['.signore'];
        _this.ignoreRules = {};
        _this.parent = opts.parent || null;
        _this.includeEmpty = !!opts.includeEmpty;
        _this.root = _this.parent ? _this.parent.root : _this.path;
        _this.follow = !!opts.follow;
        _this.result = _this.parent ? _this.parent.result : new Set();
        _this.entries = null;
        _this.sawError = false;
        return _this;
    }
    Walker.prototype.sort = function (a, b) {
        return a.localeCompare(b, 'en');
    };
    Walker.prototype.emit = function (ev, data) {
        var ret = false;
        if (!(this.sawError && ev === 'error')) {
            if (ev === 'error') {
                this.sawError = true;
            }
            else if (ev === 'done' && !this.parent) {
                data = Array.from(data)
                    .map(function (e) { return /^@/.test(e) ? "./" + e : e; }).sort(this.sort);
                this.result = data;
            }
            if (ev === 'error' && this.parent) {
                ret = this.parent.emit('error', data);
            }
            else {
                ret = _super.prototype.emit.call(this, ev, data);
            }
        }
        return ret;
    };
    Walker.prototype.start = function () {
        var _this = this;
        fs.readdir(this.path, function (er, entries) {
            return er ? _this.emit('error', er) : _this.onReaddir(entries);
        });
        return this;
    };
    Walker.prototype.isIgnoreFile = function (e) {
        return e !== '.' &&
            e !== '..' &&
            this.ignoreFiles.indexOf(e) !== -1;
    };
    Walker.prototype.onReaddir = function (entries) {
        var _this = this;
        this.entries = entries;
        if (entries.length === 0) {
            if (this.includeEmpty) {
                this.result.add(this.path.substr(this.root.length + 1));
            }
            this.emit('done', this.result);
        }
        else {
            var hasIg = this.entries.some(function (e) { return _this.isIgnoreFile(e); });
            if (hasIg) {
                this.addIgnoreFiles();
            }
            else {
                this.filterEntries();
            }
        }
    };
    Walker.prototype.addIgnoreFiles = function () {
        var _this = this;
        var newIg = this.entries
            .filter(function (e) { return _this.isIgnoreFile(e); });
        var igCount = newIg.length;
        var then = function (_) {
            if (--igCount === 0) {
                _this.filterEntries();
            }
        };
        newIg.forEach(function (e) { return _this.addIgnoreFile(e, then); });
    };
    Walker.prototype.addIgnoreFile = function (file, then) {
        var _this = this;
        var ig = path_1.default.resolve(this.path, file);
        fs.readFile(ig, 'utf8', function (er, data) {
            return er ? _this.emit('error', er) : _this.onReadIgnoreFile(file, data, then);
        });
    };
    Walker.prototype.onReadIgnoreFile = function (file, data, then) {
        var mmopt = {
            matchBase: true,
            dot: true,
            flipNegate: true,
            nocase: true,
        };
        var rules = data.split(/\r?\n/)
            .filter(function (line) { return !/^#|^$/.test(line.trim()); })
            .map(function (r) {
            // support ./ && !./
            if (r) {
                if (r.startsWith('./')) {
                    r = r.substring(1);
                }
                else if (r.startsWith('!./')) {
                    r = r.replace(/^(\!\.\/)/, '!/');
                }
            }
            return new minimatch_1.Minimatch(r, mmopt);
        });
        this.ignoreRules[file] = rules;
        then();
    };
    Walker.prototype.filterEntries = function () {
        var _this = this;
        // at this point we either have ignore rules, or just inheriting
        // this exclusion is at the point where we know the list of
        // entries in the dir, but don't know what they are.  since
        // some of them *might* be directories, we have to run the
        // match in dir-mode as well, so that we'll pick up partials
        // of files that will be included later.  Anything included
        // at this point will be checked again later once we know
        // what it is.
        var filtered = this.entries.map(function (entry) {
            // at this point, we don't know if it's a dir or not.
            var passFile = _this.filterEntry(entry, false);
            var passDir = _this.filterEntry(entry, true);
            return (passFile || passDir) ? [entry, passFile, passDir] : false;
        }).filter(function (e) { return e; });
        // now we stat them all
        // if it's a dir, and passes as a dir, then recurse
        // if it's not a dir, but passes as a file, add to set
        var entryCount = filtered.length;
        if (entryCount === 0) {
            this.emit('done', this.result);
        }
        else {
            var then_1 = function (_) {
                if (--entryCount === 0) {
                    _this.emit('done', _this.result);
                }
            };
            filtered.forEach(function (filt) {
                var entry = filt[0];
                var file = filt[1];
                var dir = filt[2];
                _this.stat({ entry: entry, file: file, dir: dir }, then_1);
            });
        }
    };
    Walker.prototype.onstat = function (_a, then) {
        var st = _a.st, entry = _a.entry, file = _a.file, dir = _a.dir, isSymbolicLink = _a.isSymbolicLink;
        var abs = this.path + '/' + entry;
        if (!st.isDirectory()) {
            if (file) {
                this.result.add(abs.substring(this.root.length + 1));
            }
            then();
        }
        else {
            // is a directory
            if (dir) {
                this.walker(entry, { isSymbolicLink: isSymbolicLink }, then);
            }
            else {
                then();
            }
        }
    };
    Walker.prototype.stat = function (_a, then) {
        var _this = this;
        var entry = _a.entry, file = _a.file, dir = _a.dir;
        var abs = this.path + '/' + entry;
        fs.lstat(abs, function (er, st) {
            if (er) {
                _this.emit('error', er);
            }
            else {
                var isSymbolicLink_1 = st.isSymbolicLink();
                if (_this.follow && isSymbolicLink_1) {
                    fs.stat(abs, function (er, st) {
                        if (er) {
                            _this.emit('error', er);
                        }
                        else {
                            _this.onstat({ st: st, entry: entry, file: file, dir: dir, isSymbolicLink: isSymbolicLink_1 }, then);
                        }
                    });
                }
                else {
                    _this.onstat({ st: st, entry: entry, file: file, dir: dir, isSymbolicLink: isSymbolicLink_1 }, then);
                }
            }
        });
    };
    Walker.prototype.walkerOpt = function (entry, opts) {
        return __assign({ path: this.path + '/' + entry, parent: this, ignoreFiles: this.ignoreFiles, follow: this.follow, includeEmpty: this.includeEmpty }, opts);
    };
    Walker.prototype.walker = function (entry, opts, then) {
        new Walker(this.walkerOpt(entry, opts)).on('done', then).start();
    };
    Walker.prototype.filterEntry = function (entry, partial) {
        var _this = this;
        var included = true;
        // this = /a/b/c
        // entry = d
        // parent /a/b sees c/d
        if (this.parent && this.parent.filterEntry) {
            var pt = this.basename + '/' + entry;
            included = this.parent.filterEntry(pt, partial);
        }
        this.ignoreFiles.forEach(function (f) {
            if (_this.ignoreRules[f]) {
                _this.ignoreRules[f].forEach(function (rule) {
                    // negation means inclusion
                    // so if it's negated, and already included, no need to check
                    // likewise if it's neither negated nor included
                    if (rule.negate !== included) {
                        // first, match against /foo/bar
                        // then, against foo/bar
                        // then, in the case of partials, match with a /
                        var match = rule.match('/' + entry) ||
                            rule.match(entry) ||
                            (!!partial && (rule.match('/' + entry + '/') ||
                                rule.match(entry + '/'))) ||
                            (!!partial && rule.negate && (rule.match('/' + entry, true) ||
                                rule.match(entry, true)));
                        if (match) {
                            included = rule.negate;
                        }
                    }
                });
            }
        });
        return included;
    };
    return Walker;
}(events_1.EventEmitter));
var WalkerSync = /** @class */ (function (_super) {
    __extends(WalkerSync, _super);
    function WalkerSync() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WalkerSync.prototype.start = function () {
        this.onReaddir(fs.readdirSync(this.path));
        return this;
    };
    WalkerSync.prototype.addIgnoreFile = function (file, then) {
        var ig = path_1.default.resolve(this.path, file);
        this.onReadIgnoreFile(file, fs.readFileSync(ig, 'utf8'), then);
    };
    WalkerSync.prototype.stat = function (_a, then) {
        var entry = _a.entry, file = _a.file, dir = _a.dir;
        var abs = this.path + '/' + entry;
        var st = fs.lstatSync(abs);
        var isSymbolicLink = st.isSymbolicLink();
        if (this.follow && isSymbolicLink) {
            st = fs.statSync(abs);
        }
        // console.error('STAT SYNC', {st, entry, file, dir, isSymbolicLink, then})
        this.onstat({ st: st, entry: entry, file: file, dir: dir, isSymbolicLink: isSymbolicLink }, then);
    };
    WalkerSync.prototype.walker = function (entry, opts, then) {
        new WalkerSync(this.walkerOpt(entry, opts)).start();
        then();
    };
    return WalkerSync;
}(Walker));
var walk = function (opts, callback) {
    var p = new Promise(function (resolve, reject) {
        new Walker(opts).on('done', resolve).on('error', reject).start();
    });
    return callback ? p.then(function (res) { return callback(null, res); }, callback) : p;
};
var walkSync = function (opts) { return new WalkerSync(opts).start().result; };
walk.sync = walkSync;
walk.Walker = Walker;
walk.WalkerSync = WalkerSync;
exports.default = walk;
//# sourceMappingURL=data:application/json;base64,