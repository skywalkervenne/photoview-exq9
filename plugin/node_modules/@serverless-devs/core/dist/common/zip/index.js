"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = __importDefault(require("fs-extra"));
var archiver_1 = __importDefault(require("archiver"));
var lodash_1 = require("lodash");
var chalk_1 = require("chalk");
var s_progress_bar_1 = require("@serverless-devs/s-progress-bar");
var path_1 = __importDefault(require("path"));
var ignore_1 = __importDefault(require("ignore"));
var readline_1 = __importDefault(require("readline"));
var ignore_zip_1 = require("./ignore-zip");
var processCwd = process.cwd();
var isWindows = process.platform === 'win32';
function zip(options) {
    return __awaiter(this, void 0, void 0, function () {
        var codeUri, exclude, include, outputFileName, _a, outputFilePath, fileName, fsStat, output, zipArchiver, count, _i, include_1, item, c;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!!('exclude' in options)) return [3 /*break*/, 2];
                    return [4 /*yield*/, ignore_zip_1.ignoreZip(options)];
                case 1: return [2 /*return*/, _b.sent()]; // 新方法
                case 2:
                    codeUri = options.codeUri, exclude = options.exclude, include = options.include, outputFileName = options.outputFileName, _a = options.outputFilePath, outputFilePath = _a === void 0 ? './' : _a;
                    if (outputFileName) {
                        fileName = outputFileName.includes('.') ? outputFileName : outputFileName + ".zip";
                    }
                    else {
                        fileName = 'demo.zip';
                    }
                    return [4 /*yield*/, fs_extra_1.default.ensureDir(outputFilePath)];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, fs_extra_1.default.pathExists(codeUri)];
                case 4:
                    if (!(_b.sent())) {
                        throw new Error("CodeUri: " + codeUri + " is not exist");
                    }
                    return [4 /*yield*/, fs_extra_1.default.stat(codeUri)];
                case 5:
                    fsStat = _b.sent();
                    if (fsStat.isFile() && exclude && include) {
                        throw new Error(codeUri + " is file, and Include/Exclude was not provided");
                    }
                    output = fs_extra_1.default.createWriteStream(outputFilePath + "/" + fileName);
                    console.log('Packing ...');
                    zipArchiver = archiver_1.default('zip', {
                        zlib: { level: 9 },
                    })
                        .on('warning', function (err) {
                        console.warn(err);
                    })
                        .on('error', function (err) {
                        throw err;
                    });
                    zipArchiver.pipe(output);
                    return [4 /*yield*/, zipTo(codeUri, zipArchiver, exclude)];
                case 6:
                    count = _b.sent();
                    if (!include) return [3 /*break*/, 10];
                    _i = 0, include_1 = include;
                    _b.label = 7;
                case 7:
                    if (!(_i < include_1.length)) return [3 /*break*/, 10];
                    item = include_1[_i];
                    return [4 /*yield*/, zipTo(item, zipArchiver)];
                case 8:
                    c = _b.sent();
                    count += c;
                    _b.label = 9;
                case 9:
                    _i++;
                    return [3 /*break*/, 7];
                case 10: return [4 /*yield*/, new Promise(function (resolve, reject) {
                        var bar;
                        zipArchiver.on('progress', function (processOptions) {
                            if (!bar) {
                                bar = new s_progress_bar_1.ProgressService(s_progress_bar_1.ProgressType.Bar, { total: lodash_1.get(processOptions, 'fs.totalBytes') }, chalk_1.green('ziping') + " ((:bar)) :current/:total(Bytes) :percent :etas");
                            }
                            bar.update(lodash_1.get(processOptions, 'fs.processedBytes'));
                        });
                        output.on('close', function () {
                            var compressedSize = zipArchiver.pointer();
                            console.log('Package complete.');
                            resolve({ count: count, compressedSize: compressedSize });
                        });
                        try {
                            zipArchiver.finalize();
                        }
                        catch (err) {
                            reject(err);
                        }
                    })];
                case 11: return [2 /*return*/, _b.sent()];
            }
        });
    });
}
function zipTo(codeUri, zipArchiver, exclude) {
    return __awaiter(this, void 0, void 0, function () {
        var asbFilePath, fsStat, isBootstrap, funignore, count;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    asbFilePath = path_1.default.resolve(codeUri);
                    return [4 /*yield*/, fs_extra_1.default.stat(codeUri)];
                case 1:
                    fsStat = _a.sent();
                    if (fsStat.isFile()) {
                        isBootstrap = isBootstrapPath(asbFilePath, asbFilePath, true);
                        zipArchiver.file(asbFilePath, {
                            name: path_1.default.basename(codeUri),
                            mode: isBootstrap ? fsStat.mode | 73 : fsStat.mode,
                        });
                        return [2 /*return*/, 1];
                    }
                    funignore = null;
                    if (!exclude) return [3 /*break*/, 3];
                    return [4 /*yield*/, generateFunIngore(processCwd, codeUri, exclude)];
                case 2:
                    funignore = _a.sent();
                    _a.label = 3;
                case 3: return [4 /*yield*/, zipFolder(zipArchiver, codeUri, [], funignore, codeUri, '')];
                case 4:
                    count = _a.sent();
                    return [2 /*return*/, count];
            }
        });
    });
}
function zipFolder(zipArchiver, folder, folders, funignore, codeUri, prefix) {
    if (prefix === void 0) { prefix = ''; }
    return __awaiter(this, void 0, void 0, function () {
        var absCodeUri, dir, dirItems, pmaps;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    folders.push(folder);
                    absCodeUri = path_1.default.resolve(codeUri);
                    dir = path_1.default.join.apply(path_1.default, folders);
                    return [4 /*yield*/, fs_extra_1.default.readdir(dir)];
                case 1:
                    dirItems = _a.sent();
                    // 判断是否为空文件
                    if (dirItems.length === 0) {
                        return [2 /*return*/, zipArchiver.file(dir, { name: path_1.default.relative(codeUri, dir) })];
                    }
                    return [4 /*yield*/, Promise.all(dirItems.map(function (f) { return __awaiter(_this, void 0, void 0, function () {
                            var fPath, s, error_1, absFilePath, relative, isBootstrap, content, target;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        fPath = path_1.default.join(dir, f);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, fs_extra_1.default.lstat(fPath)];
                                    case 2:
                                        s = _a.sent();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_1 = _a.sent();
                                        console.log("Before zip: could not found fPath " + fPath + ", absolute fPath is " + path_1.default.resolve(fPath) + ", exception is " + error_1 + ", skiping");
                                        return [2 /*return*/, 0];
                                    case 4:
                                        // TODO we need to ignore .s directory, but dont want to show redundant log.
                                        // find a better way to handle this log problem
                                        if (funignore && funignore(fPath)) {
                                            console.log('file %s is ignored.', fPath);
                                            return [2 /*return*/, 0];
                                        }
                                        absFilePath = path_1.default.resolve(fPath);
                                        relative = path_1.default.relative(absCodeUri, absFilePath);
                                        isBootstrap = isBootstrapPath(absFilePath, absCodeUri, false);
                                        if (!(s.size === 1067)) return [3 /*break*/, 6];
                                        return [4 /*yield*/, readLines(fPath)];
                                    case 5:
                                        content = _a.sent();
                                        if (content[0] === 'XSym' && content.length === 5) {
                                            target = content[3];
                                            zipArchiver.symlink(relative, target, {
                                                mode: isBootstrap || isWindows ? s.mode | 73 : s.mode,
                                            });
                                            return [2 /*return*/, 1];
                                        }
                                        _a.label = 6;
                                    case 6:
                                        if (!(s.isFile() || s.isSymbolicLink())) return [3 /*break*/, 7];
                                        zipArchiver.file(fPath, {
                                            name: relative,
                                            prefix: prefix,
                                            mode: isBootstrap || isWindows ? s.mode | 73 : s.mode,
                                            stats: s,
                                        });
                                        return [2 /*return*/, 1];
                                    case 7:
                                        if (!s.isDirectory()) return [3 /*break*/, 9];
                                        return [4 /*yield*/, zipFolder(zipArchiver, f, folders.slice(), funignore, codeUri, prefix)];
                                    case 8: return [2 /*return*/, _a.sent()];
                                    case 9:
                                        console.error("Ignore file " + absFilePath + ", because it isn't a file, symbolic link or directory");
                                        return [2 /*return*/, 0];
                                }
                            });
                        }); }))];
                case 2:
                    pmaps = _a.sent();
                    return [2 /*return*/, pmaps.reduce(function (sum, curr) { return sum + curr; }, 0)];
            }
        });
    });
}
function readLines(fileName) {
    return new Promise(function (resolve, reject) {
        var lines = [];
        readline_1.default
            .createInterface({ input: fs_extra_1.default.createReadStream(fileName) })
            .on('line', function (line) { return lines.push(line); })
            .on('close', function () { return resolve(lines); })
            .on('error', reject);
    });
}
function isBootstrapPath(absFilePath, absCodeUri, isFile) {
    if (isFile === void 0) { isFile = true; }
    var absBootstrapDir;
    if (isFile) {
        absBootstrapDir = path_1.default.dirname(absCodeUri);
    }
    else {
        absBootstrapDir = absCodeUri;
    }
    return path_1.default.join(absBootstrapDir, 'bootstrap') === absFilePath;
}
function generateFunIngore(baseDir, codeUri, exclude) {
    return __awaiter(this, void 0, void 0, function () {
        var absCodeUri, absBaseDir, relative, ig;
        return __generator(this, function (_a) {
            absCodeUri = path_1.default.resolve(baseDir, codeUri);
            absBaseDir = path_1.default.resolve(baseDir);
            relative = path_1.default.relative(absBaseDir, absCodeUri);
            if (codeUri.startsWith('..') || relative.startsWith('..')) {
                console.warn("\t\tFunignore is not supported for your CodeUri: " + codeUri);
                return [2 /*return*/, null];
            }
            ig = ignore_1.default().add(exclude.map(function (o) { return path_1.default.join(o); }));
            return [2 /*return*/, function (f) {
                    var relativePath = path_1.default.relative(baseDir, f);
                    if (relativePath === '') {
                        return false;
                    }
                    return ig.ignores(relativePath);
                }];
        });
    });
}
exports.default = zip;
//# sourceMappingURL=data:application/json;base64,