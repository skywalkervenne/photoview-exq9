/// <reference types="node" />
interface HintOptions {
    loading?: string;
    success?: string;
    error?: string;
}
interface RequestOptions {
    method?: string;
    body?: object;
    params?: object;
    hint?: HintOptions;
    ignoreError?: boolean;
    [key: string]: any;
}
interface IErrorConfig {
    requestUrl: string;
    statusCode: string | number;
    errorMsg: string;
}
export declare function reportError(config: IErrorConfig): void;
export interface IDownloadOptions {
    /**
     * If set to true, try extracting the file using decompress.
     */
    extract?: boolean;
    /**
     * Name of the saved file.
     */
    filename?: string;
    /**
     * Proxy endpoint
     */
    proxy?: string;
    /**
     * Request Headers
     */
    headers?: {
        [name: string]: string;
    };
    /**
     * Filter out files before extracting
     */
    filter?: any;
    /**
     * Map files before extracting
     */
    map?: any;
    /**
     * Array of plugins to use.
     * Default: [decompressTar(), decompressTarbz2(), decompressTargz(), decompressUnzip()]
     */
    plugins?: any[];
    /**
     * Remove leading directory components from extracted files.
     * Default: 0
     */
    strip?: number;
    body?: string | Buffer;
    postfix?: string;
}
declare function request(url: string, options?: RequestOptions): Promise<any>;
export default request;
